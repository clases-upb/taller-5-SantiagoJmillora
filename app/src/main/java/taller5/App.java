/*
 * This source file was generated by the Gradle 'init' task
 */
package taller5;
import java.util.Random;
import java.text.DecimalFormat;
import java.util.Scanner;


public class App {
    
    public static String 
        Verde = "\u001B[32m",
        Rojo = "\u001B[31m",
        Negro = "\u001B[30m",
        Amarillo = "\u001B[33m",
        Azul = "\u001B[34m",
        Purpura = "\u001B[35m",
        CYAN = "\u001B[36m",
        Blanco = "\u001B[37m",
        RESET = "\u001B[0m";
    public static void main(String[] args) {
        
        try {
          // System.out.println(Verde + "Cuantas vueltas dio para generar el mismo numero: " + RESET + ContadorIntentos(2000));  
          // System.out.println(Rojo + "ERROR " + RESET + ContadorIntentos(1));
          // System.out.println(Verde + "Generador de ventas " + RESET + Simular_ventas());
          // System.out.println(Verde + "Jugar 21\n" + RESET + Jugar_21((byte)2));

          //Scanner para Jugar_21
            Scanner scanner = new Scanner(System.in);
            
            //Pregunta cuantos jugadores quiere el usuario
            System.out.println(Verde + "Cuantos jugadores van a jugar a 21? " + RESET);
            int jugadores = scanner.nextInt();
        
            System.out.println(Jugar_21(jugadores));

            //Scaner para Calcular_empaque
            Scanner cuantosBombillos = new Scanner(System.in);
            System.out.println("Cuantos bombillos tiene que empacar? ");
            int cantBombillos_empacar = cuantosBombillos.nextInt();

            System.out.println(Calcular_empaque(cantBombillos_empacar));
        }         
        catch (Exception e) {
            // TODO: handle exception
        }
    }


    /*
    
        1.	Desarrolle un algoritmo e impleméntelo en Java que: le pida al usuario un número entero positivo 
        entre 1000 y 9999. En un ciclo genere números de manera aleatoria y cuente los intentos que hizo antes 
        de hallar el número exactamente.
        
    
    */ 
    public static int ContadorIntentos(int num){
        try {
            final short valorMax = 9999, valorMin = 1000, valorMin_uno = valorMin + 1;
            int aleatorio = 0, contador = 0;

            //Verificar que num este entre 1000 y 9999
            if(num < valorMin && num > valorMax)
                return -1;
            else{
                while (aleatorio != num) {
                    //Generando nuevo random
                    aleatorio = new Random().nextInt(valorMax - valorMin + valorMin_uno);

                    //Sumando 1 al contador cada vez que el ciclo opere
                    contador++;
                }
            }

            return contador;
        } catch (Exception e) {
            return -1;
        }
    }



    /* 
     
        2.	Se requiere una función en java que simule las ventas de tres años para un almacén. Para cada año, deberá generar 
        un aleatorio para cada mes hasta completar los 12 meses. La función se llamará Simular_ventas, y debe retornar un String 
        al final que muestre las ventas de cada año, así:
        
            Año 1
            Ventas Mes 1: $##.###.###
            :
            Ventas Mes 12: $##.###.###
            Total ventas Año 1:  $##.###.###
            
            Año 2
            Ventas Mes 1: $##.###.###
            :
            Ventas Mes 12: $##.###.###
            Total ventas Año 2: $##.###.###
            
            Año 3
            Ventas Mes 1: $##.###.###
            :
            Ventas Mes 12: $##.###.###

            Total ventas Año 3: $##.###.###
            
            Investigue sobre la clase DecimalFormat para mostrar bien la salida. 
            import java.text.DecimalFormat;
            DecimalFormat form_pesos = new DecimalFormat("$#,###.00");              
    */
    public static String Simular_ventas(){
        try {
            //Constantes
            final byte anos = 3, meses = 12;
            //Declaracion de formateada
            DecimalFormat form_pesos = new DecimalFormat("$#,###.00");
            //Variables y msjFinal a retornar
            String msjFinal = "";
            long totalVentas = 0;
            int aleatorio = 0;

            for(short ano = 1; ano <= anos; ano++){ //Ciclo para los años 
                msjFinal += "\nAño " + ano + "\n";

                for(short mes = 0; mes <= meses; mes++){ //Ciclo para los meses
                    //Generacion de aleatorio para "Ventas mensuales"
                    aleatorio = new Random().nextInt(9999 - 1 + 2);

                    //Concatenacion de msjFinal con la formateada form_pesos
                    msjFinal += "Ventas mes " + mes + ": " + form_pesos.format(aleatorio) + "\n";
                    totalVentas += aleatorio;
                    
                    
                }       
        
                msjFinal +="\nTotal ventas año " + ano + ": " + form_pesos.format(totalVentas) + "\n";                
            }
            
            return msjFinal;

        } catch (Exception e) {
            return (Rojo + "Ocurrio un error" + RESET);
        }
    }
    



    /*  
     
        3.	En una fábrica se tiene el siguiente patrón de empaque: En una estiba(o pallet) caben 16  cajas y en cada caja, 
        caben 30 bombillas. Desarrolle una función que se llame: Calcular_empaque que: reciba como argumento la cantidad de 
        bombillas que se deben empacar y a partir de allí: calcule cuántas cajas necesita, cuántas estibas o pallets necesita. 
        Luego escriba lo siguiente: 

        Para ### bombillas, se necesitan ## cajas y ## pallets. Se quedan ### bombillas sin empacar. Se empacará así:

        Pallet 1 --> Caja1, Caja2……,Caja16
        Pallet2 -->  Caja17, Caja18…..Caja 32
        .
        Pallet n -- > Caja m, caja m+1…..
        
        La función retornará un texto, con la información anterior. Pruebe la función llamándola desde el programa principal: solicite al usuario el número de bombillas e invoque la función para imprimir en el main, los resultados.
    */
    public static String Calcular_empaque(int cantidadBombillas) {
        int bombillasPorCaja = 30;
        int cajasPorPallet = 16;

        int cantidadCajas = cantidadBombillas / bombillasPorCaja;
        int cantidadPallets = cantidadCajas / cajasPorPallet;
        int cajasRestantes = cantidadCajas % cajasPorPallet;
        int bombillasSinEmpacar = cantidadBombillas % bombillasPorCaja;

        // Si hay cajas restantes, se necesita un pallet adicional
        if (cajasRestantes > 0) {
            cantidadPallets++;
        }

        // Construcción del resultado sin StringBuilder
        String resultado = "Para " + cantidadBombillas + " bombillas, se necesitan " +
                           cantidadCajas + " cajas y " + cantidadPallets + 
                           " pallets. Se quedan " + bombillasSinEmpacar + 
                           " bombillas sin empacar.\n" + "Se empacará así:\n";

        int cajaActual = 1;

        for (int i = 1; i <= cantidadPallets; i++) {
            resultado += "Pallet " + i + " --> ";
            for (int j = 1; j <= cajasPorPallet; j++) {
                if (cajaActual > cantidadCajas) {
                    break;
                }
                resultado += "Caja " + cajaActual;
                if (j < cajasPorPallet && cajaActual < cantidadCajas) {
                    resultado += ", ";
                }
                cajaActual++;
            }
            resultado += "\n";
        }

        return resultado;
    }



    

    /* 
    

        4.	En un juego, cada jugador tiene 3 intentos para sacar cartas de una baraja. Las cartas van numeradas entre 1 y 10. 
        Una función Jugar_21, deberá simular el juego para una cantidad de usuarios que enviará el usuario desde el main entre 1 y 6.

        Para cada uno de los jugadores, el programa le calculará 3 cartas al azar y al final imprimirá el juego para cada jugador basado en las siguientes reglas: 
        
        Si saca 21 exactos: juego perfecto
        Si saca más de 21: se pasó
        Si saca menos de 21: faltaron puntos

        La función deberá imprimir los puntos de cada jugador junto con la regla anterior, como muestra el ejemplo:

        Jugador X, puntos 21 -- > juego perfecto
        Jugador Y, puntos 26 -- > se pasó
        .
        .
    */
    public static String Jugar_21(int jugadores){
        try {
            //Declaracion de constantes para condicion
            final byte min_requerido = 1, max_jugadores = 6, cartas_repartir = 3, max_cartas = 10, min_cartas = 1, min_cartas_uno = min_cartas + 1, veinte_uno = 21;

            //Declaracion de variables para el programa
            String msj_final = "";
            byte resultado = 0;
            int aleatorio = 0;

            //Verificar que jugardores este en [1,6]
            if(jugadores < min_requerido || jugadores > max_jugadores)
                return "Ocurrio un error";

            else{ //Si no hay problemas pasa al programa principal de la funcion
                for(byte barajas = 1; barajas <= jugadores; barajas++){ //Reparticion de barajas a cada jugador del programa
                    //Reseteo de resultado depues del bucle de reparticion de cartas
                    resultado = 0;
                    for(byte cartas = 0; cartas < cartas_repartir; cartas++){//Reparticion de 3 cartas aleatorias y sumatoria del total al jugador
                        //Generacion de cartas aleatorias del 1 al 10
                        aleatorio = new Random().nextInt(max_cartas - min_cartas + min_cartas_uno);
                        resultado += aleatorio;
                        
                    }

                    //Comparacion para mensaje de despedida
                    if(resultado == veinte_uno)
                        msj_final += "Jugador " + barajas + ", puntos " + resultado + " --> juego perfecto\n";
                    else if (resultado > veinte_uno) 
                        msj_final += "Jugador " + barajas + ", puntos " + resultado + " --> Se pasó\n";
                    else
                        msj_final += "Jugador " + barajas + ", puntos " + resultado + " --> Faltaron puntos\n";
                }

                return msj_final;
            }
    
        } catch (Exception e) {
            return (Rojo + "Ocurrio un error" + RESET);
        }
    }



}
